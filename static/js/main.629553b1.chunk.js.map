{"version":3,"sources":["Component/Pagination/Pagination.js","App.js","index.js"],"names":["Pagination","props","total","perPage","page","state","navInfo","this","onPageChange","totalPages","Math","ceil","pages","i","push","className","type","onClick","setState","map","pageNumber","index","key","length","React","Component","App","selectedPage","currentPage","ReactDOM","render","document","getElementById"],"mappings":"sOAgGeA,G,8DA3Fb,WAAYC,GAAQ,IAAD,6BACjB,cAAMA,IACgCA,MAA9BC,EAFS,EAETA,MAAOC,EAFE,EAEFA,QAASC,EAFP,EAEOA,KAFP,OAIjB,EAAKC,MAAQ,CACXC,QAAQ,GAAD,QAAOF,EAAO,GAAKD,EAAW,EAA9B,YAAmCC,EAAOD,EAA1C,eAAwDD,IALhD,E,qDAcjB,IALQ,IAAD,SACwCK,KAAKN,MAA5CC,EADD,EACCA,MAAOC,EADR,EACQA,QAASC,EADjB,EACiBA,KAAMI,EADvB,EACuBA,aACxBC,EAAaC,KAAKC,KAAKT,EAAQC,GAC/BS,EAAQ,GAELC,EAAI,EAAGA,GAAKJ,EAAYI,GAAK,EACpCD,EAAME,KAAKD,GAGb,OACE,6BACE,uBAAGE,UAAU,aAAaR,KAAKF,MAAMC,SACrC,wBAAIS,UAAU,aACZ,wBAAIA,UAAU,aACZ,4BACEC,KAAK,SACLD,UAAU,YACVE,QAAS,WACM,IAATb,IACFI,EAAaJ,EAAO,GACpB,EAAKc,SAAS,CAAEZ,QAAQ,GAAD,QAC5BF,EAAO,GAAKD,EAAW,EADK,aACCC,EAAO,GAAKD,EADb,eAC2BD,QAPxD,aAcDU,EAAMO,KAAI,SAACC,EAAYC,GAAb,OACT,wBACEN,UAAWM,IAAUjB,EAAO,EACxB,wBACA,YACJkB,IAAKF,GAEL,4BACEJ,KAAK,SACLD,UAAU,YACVE,QAAS,WACHG,IAAehB,IACjBI,EAAaY,GACb,EAAKF,SAAS,CAAEZ,QAAQ,GAAD,QAC5Bc,EAAa,GAAKjB,EAAW,EADD,YACMS,EAAMW,SAAWH,EACpDlB,EACCkB,EAAcjB,EAHc,gCAItBD,QAIJkB,OAIP,wBAAIL,UAAU,aACZ,4BACEC,KAAK,SACLD,UAAU,YACVE,QAAS,WACHb,IAASQ,EAAMW,SACjBf,EAAaJ,EAAO,GACpB,EAAKc,SAAS,CAAEZ,QAAQ,GAAD,OAClBF,EAAQD,EAAW,EADD,YACMS,EAAMW,OAAS,IAAMnB,EAC9CF,GAASE,EAAO,GAAKD,EAFF,eAEgBD,QAR7C,e,GAhEasB,IAAMC,YCwBhBC,E,kDAvBb,WAAYzB,GAAQ,IAAD,8BACjB,cAAMA,IAMRO,aAAe,SAACmB,GACd,EAAKT,SAAS,CAAEU,YAAaD,KAN7B,EAAKtB,MAAQ,CACXuB,YAAa,GAHE,E,qDAYjB,OACE,kBAAC,EAAD,CACE1B,MAAO,GACPC,QAAS,EACTC,KAAMG,KAAKF,MAAMuB,YACjBpB,aAAcD,KAAKC,mB,GAlBTgB,IAAMC,WCAxBI,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.629553b1.chunk.js","sourcesContent":["import React from 'react';\nimport './Pagination.css';\nimport PropTypes from 'prop-types';\n\nclass Pagination extends React.Component {\n  constructor(props) {\n    super(props);\n    const { total, perPage, page } = this.props;\n\n    this.state = {\n      navInfo: `${((page - 1) * perPage) + 1}-${page * perPage} of ${total}`,\n    };\n  }\n\n  render() {\n    const { total, perPage, page, onPageChange } = this.props;\n    const totalPages = Math.ceil(total / perPage);\n    const pages = [];\n\n    for (let i = 1; i <= totalPages; i += 1) {\n      pages.push(i);\n    }\n\n    return (\n      <nav>\n        <p className=\"nav__info\">{this.state.navInfo}</p>\n        <ul className=\"nav__list\">\n          <li className=\"nav__item\">\n            <button\n              type=\"button\"\n              className=\"nav__link\"\n              onClick={() => {\n                if (page !== 1) {\n                  onPageChange(page - 1);\n                  this.setState({ navInfo:\n        `${((page - 2) * perPage) + 1}-${(page - 1) * perPage} of ${total}` });\n                }\n              }}\n            >\n              Previous\n            </button>\n          </li>\n          {pages.map((pageNumber, index) => (\n            <li\n              className={index === page - 1\n                ? 'nav__item highlighted'\n                : 'nav__item'}\n              key={pageNumber}\n            >\n              <button\n                type=\"button\"\n                className=\"nav__link\"\n                onClick={() => {\n                  if (pageNumber !== page) {\n                    onPageChange(pageNumber);\n                    this.setState({ navInfo:\n          `${((pageNumber - 1) * perPage) + 1}-${pages.length === pageNumber\n            ? total\n            : (pageNumber) * perPage}\n                of ${total}` });\n                  }\n                }}\n              >\n                {pageNumber}\n              </button>\n            </li>\n          ))}\n          <li className=\"nav__item\">\n            <button\n              type=\"button\"\n              className=\"nav__link\"\n              onClick={() => {\n                if (page !== pages.length) {\n                  onPageChange(page + 1);\n                  this.setState({ navInfo:\n                  `${((page) * perPage) + 1}-${pages.length - 1 === page\n                    ? total : (page + 1) * perPage} of ${total}` });\n                }\n              }}\n            >\n              Next\n            </button>\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nPagination.propTypes = {\n  total: PropTypes.number.isRequired,\n  perPage: PropTypes.number.isRequired,\n  page: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n};\n\nexport default Pagination;\n","import React from 'react';\nimport './App.css';\nimport Pagination from './Component/Pagination/Pagination';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentPage: 1,\n    };\n  }\n\n  onPageChange = (selectedPage) => {\n    this.setState({ currentPage: selectedPage });\n  }\n\n  render() {\n    return (\n      <Pagination\n        total={42}\n        perPage={5}\n        page={this.state.currentPage}\n        onPageChange={this.onPageChange}\n      />\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}